/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import * as lib from 'papaparse/papaparse.min.js';
var Papa = /** @class */ (function () {
    function Papa(config) {
        this.config = config;
        this._papa = lib;
        if (!this.config) {
            this.config = {};
        }
    }
    /**
     * Parse CSV to an array
     * @param {?} csv
     * @param {?=} config
     * @return {?}
     */
    Papa.prototype.parse = /**
     * Parse CSV to an array
     * @param {?} csv
     * @param {?=} config
     * @return {?}
     */
    function (csv, config) {
        if (config) {
            if (config.worker === true) {
                if (this.config.scriptPath) {
                    this._papa.SCRIPT_PATH = this.config.scriptPath;
                }
                else {
                    throw new Error('When using workers, the workerScriptPath must be defined in global' +
                        ' papaparse configuration. See' +
                        ' https://alberthaff.dk/projects/ngx-papaparse/docs/v3/parsing-csv/using-serviceworkers' +
                        ' for more information.');
                }
            }
        }
        return this._papa.parse(csv, config);
    };
    /**
     * Convert an array into CSV
     * @param {?} data
     * @param {?=} config
     * @return {?}
     */
    Papa.prototype.unparse = /**
     * Convert an array into CSV
     * @param {?} data
     * @param {?=} config
     * @return {?}
     */
    function (data, config) {
        return this._papa.unparse(data, config);
    };
    /**
     * Set the size in bytes of each file chunk.
     * Used when streaming files obtained from the DOM that
     * exist on the local computer. Default 10 MB.
     * @param {?} value
     * @return {?}
     */
    Papa.prototype.setLocalChunkSize = /**
     * Set the size in bytes of each file chunk.
     * Used when streaming files obtained from the DOM that
     * exist on the local computer. Default 10 MB.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._papa.LocalChunkSize = value;
    };
    /**
     * Set the size in bytes of each remote file chunk.
     * Used when streaming remote files. Default 5 MB.
     * @param {?} value
     * @return {?}
     */
    Papa.prototype.setRemoteChunkSize = /**
     * Set the size in bytes of each remote file chunk.
     * Used when streaming remote files. Default 5 MB.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._papa.RemoteChunkSize = value;
    };
    /**
     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
     * @param {?} value
     * @return {?}
     */
    Papa.prototype.setDefaultDelimiter = /**
     * Set the delimiter used when it is left unspecified and cannot be detected automatically. Default is comma.
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._papa.DefaultDelimiter = value;
    };
    Object.defineProperty(Papa.prototype, "badDelimiters", {
        /**
         * An array of characters that are not allowed as delimiters.
         */
        get: /**
         * An array of characters that are not allowed as delimiters.
         * @return {?}
         */
        function () {
            return this._papa.BAD_DELIMITERS;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Papa.prototype, "recordSeperator", {
        /**
         * The true delimiter. Invisible. ASCII code 30.
         * Should be doing the job we strangely rely upon commas and tabs for.
         */
        get: /**
         * The true delimiter. Invisible. ASCII code 30.
         * Should be doing the job we strangely rely upon commas and tabs for.
         * @return {?}
         */
        function () {
            return this._papa.RECORD_SEP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Papa.prototype, "unitSeperator", {
        /**
         * Also sometimes used as a delimiting character. ASCII code 31.
         */
        get: /**
         * Also sometimes used as a delimiting character. ASCII code 31.
         * @return {?}
         */
        function () {
            return this._papa.UNIT_SEP;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Papa.prototype, "workersSupported", {
        /**
         * Whether or not the browser supports HTML5 Web Workers.
         * If false, worker: true will have no effect.
         */
        get: /**
         * Whether or not the browser supports HTML5 Web Workers.
         * If false, worker: true will have no effect.
         * @return {?}
         */
        function () {
            return this._papa.WORKERS_SUPPORTED;
        },
        enumerable: true,
        configurable: true
    });
    Papa.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    Papa.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['PapaParseGlobalConfig',] }] }
    ]; };
    return Papa;
}());
export { Papa };
if (false) {
    /** @type {?} */
    Papa.prototype._papa;
    /** @type {?} */
    Papa.prototype.config;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFwYS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wYXBhcGFyc2UvIiwic291cmNlcyI6WyJsaWIvcGFwYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSzNELE9BQU8sS0FBSyxHQUFHLE1BQU0sNEJBQTRCLENBQUM7O0lBTTlDLGNBQWlFLE1BQThCO1FBQTlCLFdBQU0sR0FBTixNQUFNLENBQXdCO3FCQUZoRixHQUFHO1FBSWQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUNwQjtLQUNKOzs7Ozs7O0lBS00sb0JBQUs7Ozs7OztjQUFDLEdBQWdCLEVBQUUsTUFBd0I7UUFDbkQsSUFBSSxNQUFNLEVBQUU7WUFDUixJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO29CQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztpQkFDbkQ7cUJBQU07b0JBQ0gsTUFBTSxJQUFJLEtBQUssQ0FBQyxvRUFBb0U7d0JBQ2hGLCtCQUErQjt3QkFDL0Isd0ZBQXdGO3dCQUN4Rix3QkFBd0IsQ0FBQyxDQUFDO2lCQUNqQzthQUNKO1NBQ0o7UUFFRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQzs7Ozs7Ozs7SUFNbEMsc0JBQU87Ozs7OztjQUFDLElBQUksRUFBRSxNQUEwQjtRQUMzQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQzs7Ozs7Ozs7O0lBUXJDLGdDQUFpQjs7Ozs7OztjQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDOzs7Ozs7OztJQU8vQixpQ0FBa0I7Ozs7OztjQUFDLEtBQWE7UUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDOzs7Ozs7O0lBTWhDLGtDQUFtQjs7Ozs7Y0FBQyxLQUFhO1FBQ3BDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDOztJQU14QyxzQkFBSSwrQkFBYTtRQUhqQjs7V0FFRzs7Ozs7UUFDSDtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7U0FDcEM7OztPQUFBO0lBTUQsc0JBQUksaUNBQWU7UUFKbkI7OztXQUdHOzs7Ozs7UUFDSDtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUM7U0FDaEM7OztPQUFBO0lBS0Qsc0JBQUksK0JBQWE7UUFIakI7O1dBRUc7Ozs7O1FBQ0g7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1NBQzlCOzs7T0FBQTtJQU1ELHNCQUFJLGtDQUFnQjtRQUpwQjs7O1dBR0c7Ozs7OztRQUNIO1lBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDO1NBQ3ZDOzs7T0FBQTs7Z0JBMUZKLFVBQVU7Ozs7Z0RBSU0sUUFBUSxZQUFJLE1BQU0sU0FBQyx1QkFBdUI7O2VBWDNEOztTQVFhLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQYXBhUGFyc2VHbG9iYWxDb25maWd9IGZyb20gJy4vaW50ZXJmYWNlcy9wYXBhLXBhcnNlLWdsb2JhbC1jb25maWcnO1xuaW1wb3J0IHtQYXBhUGFyc2VSZXN1bHR9IGZyb20gJy4vaW50ZXJmYWNlcy9wYXBhLXBhcnNlLXJlc3VsdCc7XG5pbXBvcnQge1BhcGFQYXJzZUNvbmZpZ30gZnJvbSAnLi9pbnRlcmZhY2VzL3BhcGEtcGFyc2UtY29uZmlnJztcbmltcG9ydCB7UGFwYVVucGFyc2VDb25maWd9IGZyb20gJy4vaW50ZXJmYWNlcy9wYXBhLXVucGFyc2UtY29uZmlnJztcbmltcG9ydCAqIGFzIGxpYiBmcm9tICdwYXBhcGFyc2UvcGFwYXBhcnNlLm1pbi5qcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQYXBhIHtcbiAgICBwdWJsaWMgX3BhcGEgPSBsaWI7XG5cbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KCdQYXBhUGFyc2VHbG9iYWxDb25maWcnKSBwcml2YXRlIGNvbmZpZz86IFBhcGFQYXJzZUdsb2JhbENvbmZpZ1xuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2UgQ1NWIHRvIGFuIGFycmF5XG4gICAgICovXG4gICAgcHVibGljIHBhcnNlKGNzdjogc3RyaW5nfEZpbGUsIGNvbmZpZz86IFBhcGFQYXJzZUNvbmZpZyk6IFBhcGFQYXJzZVJlc3VsdCB7XG4gICAgICAgIGlmIChjb25maWcpIHtcbiAgICAgICAgICAgIGlmIChjb25maWcud29ya2VyID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNjcmlwdFBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFwYS5TQ1JJUFRfUEFUSCA9IHRoaXMuY29uZmlnLnNjcmlwdFBhdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXaGVuIHVzaW5nIHdvcmtlcnMsIHRoZSB3b3JrZXJTY3JpcHRQYXRoIG11c3QgYmUgZGVmaW5lZCBpbiBnbG9iYWwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgcGFwYXBhcnNlIGNvbmZpZ3VyYXRpb24uIFNlZScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBodHRwczovL2FsYmVydGhhZmYuZGsvcHJvamVjdHMvbmd4LXBhcGFwYXJzZS9kb2NzL3YzL3BhcnNpbmctY3N2L3VzaW5nLXNlcnZpY2V3b3JrZXJzJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXBhLnBhcnNlKGNzdiwgY29uZmlnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGFuIGFycmF5IGludG8gQ1NWXG4gICAgICovXG4gICAgcHVibGljIHVucGFyc2UoZGF0YSwgY29uZmlnPzogUGFwYVVucGFyc2VDb25maWcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS51bnBhcnNlKGRhdGEsIGNvbmZpZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzaXplIGluIGJ5dGVzIG9mIGVhY2ggZmlsZSBjaHVuay5cbiAgICAgKiBVc2VkIHdoZW4gc3RyZWFtaW5nIGZpbGVzIG9idGFpbmVkIGZyb20gdGhlIERPTSB0aGF0XG4gICAgICogZXhpc3Qgb24gdGhlIGxvY2FsIGNvbXB1dGVyLiBEZWZhdWx0IDEwIE1CLlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRMb2NhbENodW5rU2l6ZSh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3BhcGEuTG9jYWxDaHVua1NpemUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHNpemUgaW4gYnl0ZXMgb2YgZWFjaCByZW1vdGUgZmlsZSBjaHVuay5cbiAgICAgKiBVc2VkIHdoZW4gc3RyZWFtaW5nIHJlbW90ZSBmaWxlcy4gRGVmYXVsdCA1IE1CLlxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRSZW1vdGVDaHVua1NpemUodmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLl9wYXBhLlJlbW90ZUNodW5rU2l6ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGVsaW1pdGVyIHVzZWQgd2hlbiBpdCBpcyBsZWZ0IHVuc3BlY2lmaWVkIGFuZCBjYW5ub3QgYmUgZGV0ZWN0ZWQgYXV0b21hdGljYWxseS4gRGVmYXVsdCBpcyBjb21tYS5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0RGVmYXVsdERlbGltaXRlcih2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuX3BhcGEuRGVmYXVsdERlbGltaXRlciA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IGFsbG93ZWQgYXMgZGVsaW1pdGVycy5cbiAgICAgKi9cbiAgICBnZXQgYmFkRGVsaW1pdGVycygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhcGEuQkFEX0RFTElNSVRFUlM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHRydWUgZGVsaW1pdGVyLiBJbnZpc2libGUuIEFTQ0lJIGNvZGUgMzAuXG4gICAgICogU2hvdWxkIGJlIGRvaW5nIHRoZSBqb2Igd2Ugc3RyYW5nZWx5IHJlbHkgdXBvbiBjb21tYXMgYW5kIHRhYnMgZm9yLlxuICAgICAqL1xuICAgIGdldCByZWNvcmRTZXBlcmF0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXBhLlJFQ09SRF9TRVA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWxzbyBzb21ldGltZXMgdXNlZCBhcyBhIGRlbGltaXRpbmcgY2hhcmFjdGVyLiBBU0NJSSBjb2RlIDMxLlxuICAgICAqL1xuICAgIGdldCB1bml0U2VwZXJhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFwYS5VTklUX1NFUDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgYnJvd3NlciBzdXBwb3J0cyBIVE1MNSBXZWIgV29ya2Vycy5cbiAgICAgKiBJZiBmYWxzZSwgd29ya2VyOiB0cnVlIHdpbGwgaGF2ZSBubyBlZmZlY3QuXG4gICAgICovXG4gICAgZ2V0IHdvcmtlcnNTdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXBhLldPUktFUlNfU1VQUE9SVEVEO1xuICAgIH1cbn1cbiJdfQ==
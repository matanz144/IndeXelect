(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.exportFromJSON = factory());
}(this, function () { 'use strict';

  function assertIsArray(data, message) {
      if (Object.prototype.toString.call(data) !== '[object Array]') {
          throw new Error(message);
      }
  }
  function getValues(data) {
      return Object.keys(data).map(function (key) { return data[key]; });
  }
  function getKeys(data) {
      return Object.keys(data);
  }
  function getEntries(data) {
      return Object.keys(data).map(function (key) { return [key, data[key]]; });
  }
  function normalizeFileName(fileName, extension) {
      var suffix = '.' + extension;
      var extensionPattern = new RegExp("(\\" + extension + ")?$");
      return fileName.replace(/\s+/, '_').replace(extensionPattern, suffix);
  }

  function generateDataURI(content, type) {
      switch (type) {
          case 'txt': {
              return 'data:text/plain;charset=utf-8,' + encodeURIComponent(content);
          }
          case 'json': {
              return 'data:application/json;charset=utf-8,' + encodeURIComponent(content);
          }
          case 'csv': {
              return 'data:text/csv;charset=utf-8,\uFEFF' + encodeURIComponent(content);
          }
          case 'xls': {
              return 'data:application/vnd.ms-excel;charset=utf-8,' + encodeURIComponent(content);
          }
          default: {
              return '';
          }
      }
  }
  function downloadFile(content, type, fileName) {
      if (fileName === void 0) { fileName = 'download'; }
      var dataURI = generateDataURI(content, type);
      var anchor = document.createElement('a');
      anchor.href = dataURI;
      anchor.download = fileName;
      anchor.setAttribute('style', 'visibility:hidden');
      document.body.appendChild(anchor);
      anchor.click();
      document.body.removeChild(anchor);
  }

  function _prepareData(data) {
      var MESSAGE_VALID_JSON_FAIL = 'Invalid export data. Please provide a valid JSON';
      try {
          return typeof data === 'string' ? JSON.parse(data) : data;
      }
      catch (_a) {
          throw new Error(MESSAGE_VALID_JSON_FAIL);
      }
  }
  function _createJSONData(data, replacer, space) {
      if (replacer === void 0) { replacer = null; }
      var MESSAGE_VALID_JSON_FAIL = 'Invalid export data. Please provide valid JSON object';
      try {
          return JSON.stringify(data, replacer, space);
      }
      catch (_a) {
          throw new Error(MESSAGE_VALID_JSON_FAIL);
      }
  }
  function _createTableMap(data) {
      return data.map(getEntries).reduce(function (tMap, rowKVs, rowIndex) {
          return rowKVs.reduce(function (map, kv) {
              var key = kv[0];
              var value = kv[1];
              var columnValues = map[key] || Array.from({ length: data.length }).map(function (_) { return ''; });
              columnValues[rowIndex] =
                  (typeof value !== 'string' ? JSON.stringify(value) : value) || '';
              map[key] = columnValues;
              return map;
          }, tMap);
      }, Object.create(null));
  }
  function createCSVData(data) {
      var tableMap = _createTableMap(data);
      var head = getKeys(tableMap).join(',') + '\r\n';
      var columns = getValues(tableMap).map(function (column) { return column.map(function (value) { return "\"" + value.replace(/\"/g, '""') + "\""; }); });
      var rows = columns.reduce(function (mergedColumn, column) { return mergedColumn.map(function (value, rowIndex) { return value + "," + column[rowIndex]; }); });
      return head + rows.join('\r\n');
  }
  function _renderTableHTMLText(data) {
      var tableMap = _createTableMap(data);
      var head = getKeys(tableMap);
      var columns = getValues(tableMap).map(function (column) { return column.map(function (value) { return "<td>" + value + "</td>"; }); });
      var rows = columns.reduce(function (mergedColumn, column) { return mergedColumn.map(function (value, rowIndex) { return "" + value + column[rowIndex]; }); });
      return "\n    <table>\n      <thead><tr><th><b>" + head.join('</b></th><th><b>') + "</b></th></tr></thead>\n      <tbody><tr>" + rows.join('</tr><tr>') + "</tr></tbody>\n    </table>\n  ";
  }
  function createXLSData(data) {
      return "\n    <html>\n      <head>\n        <meta charset=\"UTF-8\">\n      </head >\n      <body>\n        " + _renderTableHTMLText(data) + "\n      </body>\n    </html >\n  ";
  }

  function exportFromJSON(_a) {
      var data = _a.data, _b = _a.fileName, fileName = _b === void 0 ? 'download' : _b, _c = _a.exportType, exportType = _c === void 0 ? 'txt' : _c, _d = _a.replacer, replacer = _d === void 0 ? null : _d, _e = _a.space, space = _e === void 0 ? 4 : _e, _f = _a.processor, processor = _f === void 0 ? downloadFile : _f, _g = _a.withBOM, withBOM = _g === void 0 ? false : _g;
      var MESSAGE_IS_ARRAY_FAIL = 'Invalid export data. Please provide an array of object';
      var MESSAGE_UNKNOWN_EXPORT_TYPE = "Can't export unknown data type " + exportType + ".";
      var safeData = _prepareData(data);
      var JSONData = _createJSONData(safeData, replacer, space);
      switch (exportType) {
          case 'txt': {
              return processor(JSONData, exportType, normalizeFileName(fileName, 'txt'));
          }
          case 'json': {
              return processor(JSONData, exportType, normalizeFileName(fileName, 'json'));
          }
          case 'csv': {
              assertIsArray(safeData, MESSAGE_IS_ARRAY_FAIL);
              var BOM = '\ufeff';
              var CSVData = createCSVData(safeData);
              var content = withBOM ? BOM + CSVData : CSVData;
              return processor(content, exportType, normalizeFileName(fileName, 'csv'));
          }
          case 'xls': {
              assertIsArray(safeData, MESSAGE_IS_ARRAY_FAIL);
              var content = createXLSData(safeData);
              return processor(content, exportType, normalizeFileName(fileName, 'xls'));
          }
          default:
              throw new Error(MESSAGE_UNKNOWN_EXPORT_TYPE);
      }
  }
  (function (exportFromJSON) {
      exportFromJSON.types = {
          txt: 'txt',
          json: 'json',
          csv: 'csv',
          xls: 'xls',
      };
      exportFromJSON.processors = { downloadFile: downloadFile };
  })(exportFromJSON || (exportFromJSON = {}));
  var exportFromJSON$1 = exportFromJSON;

  return exportFromJSON$1;

}));
